#!/usr/bin/env python3
"""
Demo script for ADetailer + ControlNet Enhanced v2.0 features
"""

import os
import sys
import yaml
import logging
from pathlib import Path
from config_validator import ConfigValidator


def setup_demo_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–º–æ"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('demo.log')
        ]
    )
    return logging.getLogger("Demo")


def demo_config_validation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("\n" + "="*60)
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
    print("="*60)
    
    config_path = "config.yaml"
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config_path}")
        return False
    
    try:
        validator = ConfigValidator(config_path)
        is_valid, errors, warnings = validator.validate_all()
        
        print(f"üìÅ –§–∞–π–ª: {config_path}")
        print(f"‚úÖ –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å: {'–¢–∞–∫' if is_valid else '–ù—ñ'}")
        
        if errors:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∏ ({len(errors)}):")
            for error in errors:
                print(f"  ‚Ä¢ {error}")
        
        if warnings:
            print(f"\n‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ({len(warnings)}):")
            for warning in warnings:
                print(f"  ‚Ä¢ {warning}")
        
        if not errors and not warnings:
            print("\nüéâ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —ñ–¥–µ–∞–ª—å–Ω–∞!")
        
        return is_valid
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
        return False


def demo_enhanced_config():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("\n" + "="*60)
    print("‚öôÔ∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è")
    print("="*60)
    
    config_path = "config.yaml"
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {config_path}")
        return
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤—ñ —Å–µ–∫—Ü—ñ—ó
        new_sections = ['quality', 'logging']
        for section in new_sections:
            if section in config:
                print(f"\nüìã –°–µ–∫—Ü—ñ—è '{section}':")
                section_data = config[section]
                for key, value in section_data.items():
                    print(f"  {key}: {value}")
            else:
                print(f"\n‚ùå –°–µ–∫—Ü—ñ—è '{section}' –≤—ñ–¥—Å—É—Ç–Ω—è")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        if 'general' in config:
            general = config['general']
            print(f"\nüîß –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ general:")
            for key in ['max_retries', 'retry_delay', 'timeout_seconds']:
                if key in general:
                    print(f"  {key}: {general[key]}")
                else:
                    print(f"  {key}: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")


def demo_batch_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π batch –æ–±—Ä–æ–±–∫–∏"""
    print("\n" + "="*60)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ batch –æ–±—Ä–æ–±–∫–∏")
    print("="*60)
    
    print("üìä –ü–æ–∫—Ä–∞—â–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è:")
    print("  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–≤–∏–º–∏ –º—ñ—Ç–∫–∞–º–∏")
    print("  ‚Ä¢ –†—ñ–∑–Ω—ñ —Ä—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è (DEBUG, INFO, WARNING, ERROR)")
    print("  ‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é")
    
    print("\nüîÑ Retry –º–µ—Ö–∞–Ω—ñ–∑–º:")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö")
    print("  ‚Ä¢ –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∏–π backoff (2s, 4s, 8s)")
    print("  ‚Ä¢ –ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±")
    
    print("\n‚ö° –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞:")
    print("  ‚Ä¢ –ú–Ω–æ–∂–∏–Ω–Ω—ñ —Ä–æ–±–æ—á—ñ –ø—Ä–æ—Ü–µ—Å–∏")
    print("  ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É")
    print("  ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤")
    
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏:")
    print("  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö/–Ω–µ–≤–¥–∞–ª–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    print("  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö")


def demo_quality_control():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª—é —è–∫–æ—Å—Ç—ñ"""
    print("\n" + "="*60)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ")
    print("="*60)
    
    print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ:")
    print("  ‚Ä¢ –î–µ—Ç–µ–∫—Ü—ñ—è –æ–±–ª–∏—á—á—è –∑ –Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞–Ω–æ—é –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é")
    print("  ‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Ä—ñ–∑–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    print("  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è —Ä–æ–∑–º–∏—Ç—Ç—è")
    
    print("\nüìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥—ñ–≤:")
    print("  ‚Ä¢ min_face_detection_confidence: 0.5")
    print("  ‚Ä¢ max_blur_threshold: 100")
    print("  ‚Ä¢ min_sharpness_score: 0.6")
    
    print("\nüé® –†–µ–∂–∏–º–∏ –æ–±—Ä–æ–±–∫–∏:")
    print("  ‚Ä¢ portrait_mode: –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ä–µ—Ç—ñ–≤")
    print("  ‚Ä¢ group_mode: –û–±—Ä–æ–±–∫–∞ –≥—Ä—É–ø–æ–≤–∏—Ö —Ñ–æ—Ç–æ")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")


def demo_gui_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è GUI –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    print("\n" + "="*60)
    print("üñ•Ô∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("="*60)
    
    print("üì± –í–∫–ª–∞–¥–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:")
    print("  ‚Ä¢ General: Backend, endpoint, retry –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    print("  ‚Ä¢ B-Pass: Prompts, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±—Ä–æ–±–∫–∏")
    print("  ‚Ä¢ I/O: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤")
    print("  ‚Ä¢ Quality: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é —è–∫–æ—Å—Ç—ñ")
    print("  ‚Ä¢ Logging: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è")
    
    print("\nüîß –§—É–Ω–∫—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:")
    print("  ‚Ä¢ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π")
    print("  ‚Ä¢ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
    print("  ‚Ä¢ –í–∏–±—ñ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥–∏")
    print("  ‚Ä¢ –ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤")
    
    print("\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:")
    print("  ‚Ä¢ –§–æ—Ä–º–∞—Ç YAML –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Unicode")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π")
    print("  ‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç/—ñ–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")


def create_sample_input_structure():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"""
    print("\n" + "="*60)
    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π")
    print("="*60)
    
    directories = ['input', 'work', 'output']
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {directory}")
        else:
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤–∂–µ —ñ—Å–Ω—É—î: {directory}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É README –≤ input
    readme_path = "input/README.txt"
    if not os.path.exists(readme_path):
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write("–ü–æ–º—ñ—Å—Ç—ñ—Ç—å —Å—é–¥–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏\n")
            f.write("–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: PNG, JPG, JPEG, WEBP\n")
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥: {readme_path}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ"""
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø ADetailer + ControlNet Enhanced v2.0")
    print("="*60)
    
    logger = setup_demo_logging()
    logger.info("–ü–æ—á–∞—Ç–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        demo_config_validation()
        demo_enhanced_config()
        demo_batch_features()
        demo_quality_control()
        demo_gui_features()
        create_sample_input_structure()
        
        print("\n" + "="*60)
        print("üéä –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        
        print("\nüìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å GUI: python config_gui.py")
        print("2. –í–∞–ª—ñ–¥—É–π—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: python config_validator.py config.yaml")
        print("3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å batch –æ–±—Ä–æ–±–∫—É: python batch.py --workers 2")
        print("4. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ª–æ–≥–∏: tail -f adetailer_batch.log")
        
        logger.info("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
